---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../utils/supabase";
import PhoneImageEdition from "../components/PhoneImageEdition";

const { cookies } = Astro;

const accessToken = cookies.get("accessToken");
const refreshToken = cookies.get("refreshToken");

if (!accessToken || !refreshToken) {
    return Astro.redirect("/login");
}

let session;
try {
    session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
    });

    if (session.error) {
        Astro.cookies.delete("accessToken", {
            path: "/",
        });
        Astro.cookies.delete("refreshToken", {
            path: "/",
        });
        return Astro.redirect("/login");
    }
} catch (error) {
    Astro.cookies.delete("accessToken", {
        path: "/",
    });
    Astro.cookies.delete("refreshToken", {
        path: "/",
    });

    return Astro.redirect("/login");
}

// Admin check Start
const { data: adminCheck, error: adminError } = await supabase
    .from("admins")
    .select("admin_id")
    .eq("admin_id", session.data.user?.id)
    .single();

//console.log("Admin error:", adminError);
//console.log("Is Admin:", isAdmin);
if (adminError) return new Response("Unauthorized", { status: 401 });
const isAdmin = adminCheck !== null;
if (!isAdmin) return new Response("Unauthorized", { status: 401 });
// Admin check END

const params = Astro.url.searchParams;
const id = params.get("id");

const { data: imageNamesFetch, error: imagesError } = await supabase.storage
    .from("images")
    .list("telefony/" + id);

if (imagesError) console.error(imagesError);

const imageNames = imageNamesFetch?.map((image: any) => image.name) || [];

const imageUrls = imageNames?.map((imageName: string) => {
    const { data: image } = supabase.storage
        .from("images")
        .getPublicUrl(`telefony/${id}/${imageName}`);
    return image.publicUrl;
});

const imageDictionary: { [key: string]: string } = {};
imageNames.forEach((name, index) => {
    imageDictionary[name] = imageUrls[index];
});
---

<Layout title="Atari muzeum">
    <div class="h-screen pt-12 pb-8 overflow-auto">
        <PhoneImageEdition
            imageUrls={imageUrls}
            id={id ?? ""}
            client:only="react"
        />
        <a
            href={`/phoneDetails?id=${id}`}
            class="fixed bottom-4 right-4 bg-blue-500 text-white p-2 rounded"
        >
            Powr√≥t
        </a>
    </div>
</Layout>
